import os
import urllib

import botocore.exceptions
import sys
import json
from core.createSession.giveMeClient import giveMeClient
import requests

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "sts",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "NAME": {
        "value": "",
        "required": "false",
        "description": "The name of the federated user. If not set, the script will run STS:GetCallerIdentity to get the username."
    },
    "POLICY": {
        "value": "",
        "required": "false",
        "description": 'The policy document to attach to user. Put it as an one line string. If not provided, the user will be given AdministratorAccess'
    },
    "DURATION": {
        "value": "3600",
        "required": "false",
        "description": 'The duration, in seconds, that the session should last. Acceptable durations for federation sessions range from 900 seconds (15 minutes) to 129,600 seconds (36 hours), with 43,200 seconds (12 hours) as the default. Sessions obtained using Amazon Web Services account root user credentials are restricted to a maximum of 3,600 seconds (one hour). If the specified duration is longer than one hour, the session obtained by using root user credentials defaults to one hour.'
    }
}
description = "This module is based of aws_consoler from NetSPI. It will run STS:GetFederationToken to create a set of temporary credentials for the user and then try to create a console that allows access even if the user no login profile."

aws_command = """
aws ssm send-command --document-name <Document Name> --instance-ids <instance ID> --profile <profile>
aws ssm get-command-invocation --command-id <command ID> --instance-id <instance ID> --profile <profile>
"""

calls = {
    "sts": [
        "GetFederationToken"
    ]
}

console = "https://console.aws.amazon.com/console/home"
federation = "https://signin.aws.amazon.com/federation"


def get_federation_token_func(stsProfile, policy, name, policyarn):
    if policy == None:
        try:
            polarn = []
            for arn in policyarn:
                polarn.append(
                    {
                        'arn': arn
                    },
                )
            return stsProfile.get_federation_token(
                Name=name,
                PolicyArns=polarn
            )
        except Exception as e:
            return {"error": str(e)}
    else:
        try:
            return stsProfile.get_federation_token(
                Name=name,
                Policy=policy
            )
        except Exception as e:
            return {"error": str(e)}


def get_federation_url(creds, region, name):
    json_creds = json.dumps(
        {"sessionId": creds['AccessKeyId'],
         "sessionKey": creds['SecretAccessKey'],
         "sessionToken": creds['SessionToken']
         })
    token_params = {
        "Action": "getSigninToken",
        # TODO: Customize duration for federation and sts:AssumeRole
        "SessionDuration": 43200,
        "Session": json_creds
    }
    try:
        resp = requests.get(url=federation, params=token_params)
        if resp.status_code == 200:
            session_token = json.loads(resp.text)['SigninToken']

        else:
            return {"error": f"HTTP Error Code {str(resp.status_code)}."}

        login_params = {
            "Action": "login",
            "Issuer": name,
            "Destination": f"{console}?{urllib.parse.urlencode({'region': region})}",
            "SigninToken": session_token
        }
        login_url = f"{federation}?{urllib.parse.urlencode(login_params)}"

        return {"URL": login_url}

    except Exception as e:
        return {"error": str(e)}


# def exploit(all_sessions, cred_prof, useragent, web_proxies):
def exploit(profile, test):
    try:
        name = variables['NAME']['value']
        policy = variables['POLICY']['value']

        if name == "":
            try:
                name = (profile.get_caller_identity()['Arn']).split("/")[-1]
            except Exception as e:
                return {"error": str(e)}

        if not policy == "":
            try:
                policyjson = json.loads(policy)
                policyjson = policy
            except TypeError:
                return {"error": "Policy file content is not a JSON."}
        else:
            policyjson = json.dumps({"Version": "2012-10-17", "Statement": [
                {"Sid": "VisualEditor0", "Effect": "Allow", "Action": "*", "Resource": "*"}]})

        creds = {}

        creds['AccessKeyId'] = os.environ['AWS_ACCESS_KEY']
        creds['SecretAccessKey'] = os.environ.get('AWS_SECRET_KEY')
        region = os.environ.get('AWS_REGION')

        if os.environ.get('AWS_SESSION_TOKEN'):
            creds['SessionToken'] = os.environ.get('AWS_SESSION_TOKEN')

        else:
            response = get_federation_token_func(profile, policyjson, name, None)

            if "error" in response:
                return response

            creds = response['Credentials']


        url = get_federation_url(creds, region, name)
        if "error" in url:
            return url
        return url

    except Exception as e:
        return {"error": str(e)}
